*bareline* A statusline plugin for the pragmatic.

MIT License Copyright (c) 2024 Hernán Cervera.

Contents:

1. Introduction                                   |bareline-introduction|
2. Quickstart                                     |bareline-quickstart|
3. Configuration                                  |bareline-configuration|
4. Custom components                              |bareline-custom-components|
5. Control statusline redraws                     |bareline-control-stl-redraws|
6. Built-in components                            |bareline-built-in-components|

                  Press `gO` to load the table of contents in the location list.
==============================================================================
                                                         *bareline-introduction*
Introduction ~

Key design ideas

1. Ease of configuration.
2. Batteries included experience.
3. No timer required. Update immediately as changes happen.

Concepts

Bareline conceptualizes a statusline in this way:
• A statusline is a list of sections.
• Each section is a list of components.

Visualized example

Statusline: | NOR  lua/bareline.lua                        (main)  22,74/454 |
              Section 1                                    Section 2
              └── Components                               └── Components
                  ├── Vim mode                                 ├── Git HEAD
                  └── Relative file path                       └── Location

------------------------------------------------------------------------------
                                                           *bareline-quickstart*
Quickstart ~

To enable the plugin you need to call the |bareline.setup()| function. To use
the defaults, call it without arguments:
>lua
  require("bareline").setup()
  vim.o.showmode = false -- Optional, recommended.
<
                                                              *bareline.setup()*
                           `bareline.setup`({config})
Module setup.
Parameters ~
{config} `(table?)` Merged with the default config (|bareline.default_config|)
and the former takes precedence on duplicate keys.

------------------------------------------------------------------------------
                                                               *bareline.config*
                                                       *bareline.default_config*
                                                        *bareline-configuration*
Configuration ~

The merged config (defaults with user overrides) is in `bareline.config`. The
default config is in `bareline.default_config`. The default uses distinct
statuslines for active, inactive and plugin windows.

Below is the default config; `bareline` is the value of `require("bareline")`.
>lua
  {
    statuslines = {
      -- Active window.
      active = {
        { -- Section 1: Left.
          bareline.components.vim_mode,
          bareline.components.file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          bareline.components.mhr,
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.end_of_line,
          bareline.components.indent_style,
          bareline.components.git_head,
          bareline.components.cwd,
          bareline.components.position,
        },
      },
      -- Inactive windows.
      inactive = {
        { -- Section 1: Left.
          bareline.components.vim_mode:config({ mask = " " }),
          bareline.components.file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          bareline.components.mhr,
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.end_of_line,
          bareline.components.indent_style,
          bareline.components.cwd,
          bareline.components.position,
        },
      },
      -- Plugin windows.
      plugin = {
        { -- Section 1: Left.
          bareline.components.plugin_name,
          bareline.components.mhr,
        },
        { -- Section 2: Right.
          bareline.components.position,
        },
      },
    },
    components = {
      git_head = {
        worktrees = {},
      },
      mhr = {
        display_modified = true,
      },
    },
    logging = {
      enabled = false,
      level = vim.log.levels.DEBUG,
    },
  }
<
                                                   *bareline.config.statuslines*
Configures the statusline. Each field holds a statusline table definition per
window state. All the fields are of the same type: a list of lists of objects.
The lists are the sections (i.e. left, right) and the objects are the
components (strings, functions or |BareComponent|s).

Fields:

                                            *bareline.config.statuslines.active*
    {active} `(table)`
Definition for the statusline of the win focused by the cursor.

                                          *bareline.config.statuslines.inactive*
    {inactive} `(table)`
Definition for the statuslines of the wins which are:
1. NOT focused by the cursor and
2. NOT displaying a plugin's UI.

                                            *bareline.config.statuslines.plugin*
    {plugin} `(table)`
Definition for the statusline of the wins displaying a plugin's UI.

                                                    *bareline.config.components*
The component options set in |bareline.BareComponent:new()| are merged with
these options. The options here have precedence on duplicate keys.

Fields:

                                           *bareline.config.components.git_head*
    {git_head} `(table)`
See |bareline.components.git_head|.

                                                *bareline.config.components.mhr*
    {mhr} `(boolean|fun():boolean)`
See |bareline.components.mhr|.

                                                       *bareline.config.logging*
Monitor statusline redraws. The log file is located at the data directory
(`stdpath("data")`) in `bareline.nvim/bareline.log`.

Fields:

                                               *bareline.config.logging.enabled*
    {enabled} `(boolean)`
Whether to write to the log file. Default: false.

                                                 *bareline.config.logging.level*
    {level} `(integer)`
Log statements on this level and up are written to the log file, the others
are discarded. Default: `vim.log.levels.DEBUG`.

------------------------------------------------------------------------------
                                                    *bareline-custom-components*
Custom components ~

Bareline comes with some components: |bareline-built-in-components|. If none
provide what you want, you can create your own. A component can be a string,
function or |bareline.BareComponent|:

1. String: Gets evaluated as a statusline string (see 'statusline'). Examples:
   • Arbitrary string: `"S-WRAP"`. In the statusline you'll see `S-WRAP`.
   • Options: `vim.bo.fileformat`. In the statusline you might see `unix`.
   • Statusline item: `"%r"`. In the statusline you might see `[RO]`.

2. Function: Returns a string or nil. When a string, it's placed in the
   statusline; when nil, the component is skipped. Example:
>lua
   -- Get the tail of the current working directory.
   local component_cwd = function ()
     local cwd = vim.uv.cwd() or ""
     if cwd == (vim.uv.os_homedir() or "") then
       return "~"
     end
     return vim.fn.fnamemodify(cwd, ":t")
   end
<
3. |bareline.BareComponent|: This allows the most granular customization.

For several use cases you don't need to use a |bareline.BareComponent| since
out of the box the statusline gets redrawn on several autocmds.
See: |bareline-control-stl-redraws|.

------------------------------------------------------------------------------
                                                  *bareline-control-stl-redraws*

Control statusline redraws ~

Bareline does not use a timer to redraw the statusline, instead it uses:
1. |autocmd|s. See `redraw_on_autocmd` in |bareline-BareComponentCommonOpts|.
2. |uv| file watchers. See |bareline.redraw_on_fs_event()|.

These are the base autocmds used to redraw the stl:
• |BufEnter|
• |BufWinEnter|
• |WinEnter|
• |VimResume|
• |FocusGained|
• |OptionSet|
• |DirChanged|
• |TermLeave|

With the default config, these are the fs paths watched to redraw the stl:
• Git repository directories to fulfill |bareline.components.git_head|.

                                                 *bareline.redraw_on_fs_event()*
              `bareline.redraw_on_fs_event`({fs_path}, {var_name})
Conditionally create a |uv_fs_event_t| to monitor `fs_path` for changes. When
a change is detected, redraw the statusline of the current window. If a luv fs
event handle already exists for the `fs_path`, then do nothing.
Parameters ~
{fs_path} `(string)` Full or relative path to a dir or file.
{var_name} `(string)`

------------------------------------------------------------------------------
                                                        *bareline.BareComponent*
                            `bareline.BareComponent`
Standardized statusline component.
All |bareline-built-in-components| are a |bareline.BareComponent|. To create
your own components, you can use this class or use simpler types as described
in |bareline-custom-components|.
Class ~
{BareComponent}
Fields ~
{value} `(string|fun(opts:BareComponentCommonOpts):any)` Provides the value
displayed in the statusline, like the Vim mode. When the value is a function,
it gets the field `opts`. This is powerful, as it allows configuring
components after creation and setting custom options.
See: |bareline.BareComponent:config()|
{opts} `(BareComponentCommonOpts)`

                                              *bareline-BareComponentCommonOpts*
Options applicable to any |bareline.BareComponent|.
Class ~
{BareComponentCommonOpts}
Fields ~
{callback} `(fun(opts:BareComponentCommonOpts, callback:fun(var_value:any))?)`
TODO: Write docs.
{redraw_on_autocmd} `(table?)` Expects a table with the keys `event` and
`opts`. These values are passed as-is to |vim.api.nvim_create_autocmd()|.
{cache_on_vim_modes} `((string[]|fun():string[])|nil)` Use cache in these Vim
modes. Each Vim mode is expected as the first char returned by |mode()|.
{mask} `(string?)` Single character used to mask the value.

                                                  *bareline.BareComponent:new()*
              `bareline.BareComponent:new`({value}, {common_opts})
Constructor.
Parameters ~
{value} `((string|fun(opts:table):any)|nil)` Initial value of field `value`.
{common_opts} `(BareComponentCommonOpts)` Initial value of field `opts`.
Return ~
`(BareComponent)`

                                               *bareline.BareComponent:config()*
                    `bareline.BareComponent:config`({opts})
Update component opts.
Parameters ~
{opts} `(table)` The field `opts` from |bareline.BareComponent| is merged with
these opts. For built-in components, the option keys here have priority over
what is set in both |bareline.BareComponent:new()| and at the plugin setup,
i.e. |bareline.config.components|. Built-in components have their custom
options documented, which can be set using this method.
For an example, see |bareline.components.git_head|.
Return ~
`(BareComponent)`

                                                  *bareline.BareComponent:get()*
                         `bareline.BareComponent:get`()
Retrieve the value of the component.
Return ~
`(string)` `(optional)`

------------------------------------------------------------------------------
                                                  *bareline-built-in-components*
Built-in components ~

Built-in components for use in |bareline.config.statusline|. These are all
structured as a |bareline.BareComponent|. If you want to create your own
component see |bareline-custom-components|.

                                                  *bareline.components.vim_mode*
                         `bareline.components.vim_mode`
Vim mode.
The Vim mode in 3 characters.
Mockups: `NOR`, `VIS`
Type ~
`(BareComponent)`

                                               *bareline.components.plugin_name*
                       `bareline.components.plugin_name`
Plugin name.
When on a plugin window, the formatted name of the plugin window.
Mockup: `[nvimtree]`
Type ~
`(BareComponent)`

                                              *bareline.components.indent_style*
                       `bareline.components.indent_style`
Indent style.
Relies on 'expandtab' and 'tabstop'. Omitted when the buf is 'nomodifiable'.
Mockups: `spaces:2`, `tabs:4`
Type ~
`(BareComponent)`

                                               *bareline.components.end_of_line*
                       `bareline.components.end_of_line`
End of line (EOL).
Indicates when the buffer does not have an EOL on its last line. Return `noeol`
in this case, nil otherwise. This uses the option 'eol'.
Type ~
`(BareComponent)`

                                                  *bareline.components.git_head*
                         `bareline.components.git_head`
Git HEAD.

Attributes:
• async

Git needs to be installed for this component to work.

The search for the HEAD is done in relationship to the name of the current
buffer, Neovim's cwd is irrelevant. To learn the HEAD, a repo is needed.

Steps to find a repo:
1. If the buf name (filepath) is empty, do nothing.
2. Else, search with: `git -C {parent} rev-parse --absolute-git-dir`, where
   `{parent}` is the parent dir of the filepath.
3. Else, search through `worktrees` in the order they are provided. A matching
   worktree is one which its absolute toplevel is the start of the absolute
   parent dir of the filepath.

A HEAD is shown if and only if a Git repo was found and either the file is
tracked (exists in a revision or is staged) or the config option
`status.showUntrackedFiles` is enabled.

Custom options:
    {worktrees} `(table)`
List with the same structure as what the gitsigns.nvim plugin expects:
<https://github.com/lewis6991/gitsigns.nvim>. This provides support for
detached working trees; useful for bare repositories. Example:
>lua
  bareline.components.git_head:config({
    worktrees = {
      {
        toplevel = vim.env.HOME,
        gitdir = vim.env.HOME .. "/dotfiles.git"
      }
    }
  })
<
Mockup: `(main)`
Type ~
`(BareComponent)`

                                               *bareline.components.lsp_servers*
                       `bareline.components.lsp_servers`
LSP servers.
The LSP servers attached to the current buffer.
Mockup: `[lua_ls]`
Type ~
`(BareComponent)`

                                 *bareline.components.file_path_relative_to_cwd*
                `bareline.components.file_path_relative_to_cwd`
Stable `%f`.
The file path relative to the current working directory (|:pwd|). When the
user home directory appears in the file path, `~` is used to shorten the path.
Mockup: `lua/bareline.lua`
Type ~
`(BareComponent)`

                                               *bareline.components.diagnostics*
                       `bareline.components.diagnostics`
Diagnostics.
The diagnostics of the current buffer. Respects the value of:
`update_in_insert` from |vim.diagnostic.config()|.
Mockup: `e:2,w:1`
Type ~
`(BareComponent)`

                                                  *bareline.components.position*
                         `bareline.components.position`
Cursor position.
The current cursor position in the format: line,column/total-lines.
Mockup: `181:43/329`
Type ~
`(BareComponent)`

                                                       *bareline.components.cwd*
                           `bareline.components.cwd`
Current working directory.
The tail of the current working directory (cwd).
Mockup: `bareline.nvim`
Type ~
`(BareComponent)`

                                                       *bareline.components.mhr*
                           `bareline.components.mhr`
%m%h%r
Display the modified, help and read-only markers using the built-in statusline
fields, see 'statusline' for a list of fields where these are included.

Custom options:
    {display_modified} `(boolean|fun():boolean)`
Control when the modified field (`%m`) is included in the statusline. Default:
true; meaning to always include the field. The only exception to the inclusion
is when the buffer has set 'nomodifiable'.

Mockups: `[+]`, `[Help][RO]`
Type ~
`(BareComponent)`

 vim:tw=78:ts=8:noet:ft=help:norl: