*bareline* Configure simple statuslines.

MIT License Copyright (c) 2024 Hernán Cervera.

==============================================================================

Key design ideas ~

1. Ease of configuration.

2. Update immediately as changes happen. No timer required.

Concepts ~

Bareline conceptualizes a statusline in this way:
• A statusline is a list of sections.
• Each section is a list of components.

Visualized example:

Statusline: | NOR  lua/bareline.lua                        (main)  22,74/454 |
              Section 1                                    Section 2
              └── Components                               └── Components
                  ├── Vim mode                                 ├── Git HEAD
                  └── Relative file path                       └── Location

------------------------------------------------------------------------------
                                                              *bareline.setup()*
                           `bareline.setup`({config})
Module setup.

To enable the plugin you need to call the `setup()` function. Usage:
>lua
  local bareline = require("bareline")
  bareline.setup() -- You may provide a table for your configuration.
<
I recommend disabling 'showmode', so only Bareline shows the Vim mode.

Parameters ~
{config} `(table|nil)` Module config table. |bareline.default_config| defines
the default configuration. If the `config` arg is nil, then the default config
is used. If a config table is provided, it's merged with the default config
and the keys in the user's config take precedence.

------------------------------------------------------------------------------
                                                       *bareline.default_config*

Behavior ~

The default `config` used for |bareline.setup()| uses distinct statuslines for
active, inactive and plugin windows. The resulting style is inspired by
Helix's default statusline:

Active window:
• | NOR  lua/bareline.lua  [lua_ls]      e:2,w:1  spaces-2  (main)  42,21/50 |
Inactive window:
• |      lua/bareline.lua  [lua_ls]              e:2,w:1  spaces-2  42,21/50 |
Plugin window:
• | [nvimtree]  [-]                                                 28,09/33 |
                     https://github.com/helix-editor/helix

Default config ~
>lua
  bareline.default_config = {

    -- Function which takes a single argument, the `statusline` table. Based
    -- on the draw method, `statusline` might need to contain more than one
    -- statusline definition. With the default, 3 statuslines are expected.
    draw_method = bareline.draw_methods.draw_active_inactive_plugin,

    -- Enable the timer in case you have a component which is tricky to watch,
    -- or just don't want to bother with identifying how to watch it. Accepts
    -- a boolean (false = disabled, true = 500ms), or a number indicating ms
    -- in between statusline re-draws.
    timer = false,

    statusline = {
      { -- Statusline 1: Active window.
        { -- Section 1: Left.
          bareline.components.vim_mode,
          bareline.components.get_file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          "%m", "%h", "%r",
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.indent_style,
          bareline.components.end_of_line,
          bareline.components.git_head,
          bareline.components.position,
        },
      },

      { -- Statusline 2: Inactive window.
        { -- Section 1: Left.
          bareline.components.vim_mode:mask(" "),
          bareline.components.get_file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          "%m", "%h", "%r",
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.indent_style,
          bareline.components.end_of_line,
          bareline.components.position,
        },
      },

      { -- Statusline 3: Plugin window.
        { -- Section 1: Left.
          bareline.components.plugin_name,
          "%m"
        },
        { -- Section 2: Right.
          bareline.components.position
        },
      },
    }
  }
<

Overriding the defaults ~

To override the defaults, copy/paste the default config as a starting point to
use for the function |bareline.setup()|.

Custom components: These are the allowed types for `user supplied components`:

• String: Useful for very simple components, for example, statusline items
  like `%r` (see 'statusline') or options like 'fileformat'.
• Function: Must return either a string or nil. The returned string is
  what gets placed in the statusline. When nil is returned, the component
  is skipped, leaving no gap.
• |bareline.BareComponent|: Object which allows component configuration. The
  bundled components follow this structure (|bareline.components|). You might
  need to use this component type to provide a watching config, to avoid the
  need for a timer. In some cases, watching can work even with no watching
  configuration, see |bareline.BareComponentWatcher|, in those cases you can
  simply use a string or function component.

If the changes you want to make are few, then your config can be concise by
doing a deep copy of the defaults and then inserting your components, e.g.:
>lua
  local bareline = require("bareline")
  -- Custom component.
  local component_prose_mode = function ()
    if string.find(vim.bo.formatoptions, "a") then return "PROSE" end
    return nil
  end
  -- Overrides to default config.
  local config = vim.deepcopy(bareline.default_config)
  table.insert(config.statusline[1][1], 2, component_prose_mode)
  table.insert(config.statusline[2][1], 2, component_prose_mode)
  -- Draw statusline.
  bareline.setup(config)
<

------------------------------------------------------------------------------
                                                        *bareline.BareComponent*
                            `bareline.BareComponent`
Standardized component.
All bundled components are structured like this. To create your own
components, you can use this class or, more simply, follow the alternate
component types described in |bareline.default_config|.
Class ~
{BareComponent}
Fields ~
{value} `(string|function)` Provides the value displayed in the statusline,
like the Vim mode. When a function, should return a single value of any type.
When a string, that itself is used.
{opts} BareComponentOpts Options.

                                                    *bareline.BareComponentOpts*
Class ~
{BareComponentOpts}
Fields ~
{watcher} BareComponentWatcher Watcher. Triggers a statusline redraw.
{cache_on_vim_modes} `(function|string[])` Use cache in these Vim modes. Each
Vim mode is expected as the first char returned by |mode()|. When a function,
it expects no args and should return a list with the Vim modes.

                                                 *bareline.BareComponentWatcher*
Defines the structure of watcher configuration for a component.
With Bareline, you don't need a timer to have the statusline update when you
expect it to. Since there is no fixed redraw, the plugin needs a way to know
when to do a redraw. That knowledge is provided to Bareline in a per component
basis through the watcher configuration.
When adding new components, you don't have to worry about watchers if the base
autocmds are enough. Here are the base autocmds per draw method:
• |bareline.draw_methods.draw_active_inactive_plugin|:
  • |BufNew|, |BufEnter|, |BufWinEnter|, |VimResume|, |FocusGained|, |OptionSet|.
  • In other words, pretty much only option changes are watched as a base.
Class ~
{BareComponentWatcher}
Fields ~
{autocmd} `(table)` Expects a table with the keys `event` and `opts`. These
values are passed as is to |vim.api.nvim_create_autocmd()|.
{filepath} `(function|string|table)` Filepath or list of filepaths to watch.
Alternatively, a function which expects zero args can be provided to compute
the filepath. Strings and functions can be mixed if the type is table.

                                                  *bareline.BareComponent:new()*
                 `bareline.BareComponent:new`({value}, {opts})
Constructor.
Parameters ~
{value} `function|string` As a function, it expects no args and returns a
single value of any type. As a string, is used as is.
{opts} BareComponentOpts Options.
Return ~
Bareline.BareComponent

                                                 *bareline.BareComponent:mask()*
                     `bareline.BareComponent:mask`({char})
Mask with char.
Replace each character of the component with the provided character.
Parameters ~
{char} `(string)` Single character.
Return ~
`(function)` When called returns the masked value.

------------------------------------------------------------------------------
                                                           *bareline.components*

Bundled components, meant to be used for the function |bareline.setup()|.
These are all structured as a |bareline.BareComponent|.

User supplied components can have a simpler structure. Read the section
'Overriding the defaults' from |bareline.default_config|.


                                                  *bareline.components.vim_mode*
                         `bareline.components.vim_mode`
Vim mode.
The Vim mode in 3 characters.
Mockups: `NOR`, `VIS`
Type ~
BareComponent

                                               *bareline.components.plugin_name*
                       `bareline.components.plugin_name`
Plugin name.
When on a plugin window, the formatted name of the plugin window.
Mockup: `[nvimtree]`
Type ~
BareComponent

                                              *bareline.components.indent_style*
                       `bareline.components.indent_style`
Indent style.
The indent style. Relies on 'expandtab' and 'tabstop'. This component is
omitted when the buffer has 'modifiable' disabled.
Mockups: `spaces:2`, `tabs:4`
Type ~
BareComponent

                                               *bareline.components.end_of_line*
                       `bareline.components.end_of_line`
End of line (EOL).
Indicates when the buffer does not have an EOL on its last line. Return `noeol`
in this case, nil otherwise. This uses the option 'eol'.
Type ~
BareComponent

                                                  *bareline.components.git_head*
                         `bareline.components.git_head`
Git HEAD.
Displays the Git HEAD, useful to show the Git branch.
Mockup: `(main)`
Type ~
BareComponent

                                               *bareline.components.lsp_servers*
                       `bareline.components.lsp_servers`
LSP servers.
The LSP servers attached to the current buffer.
Mockup: `[lua_ls]`
Type ~
BareComponent

                             *bareline.components.get_file_path_relative_to_cwd*
              `bareline.components.get_file_path_relative_to_cwd`
Stable `%f`.
The file path relative to the current working directory (|:pwd|).
Mockup: `lua/bareline.lua`
Type ~
BareComponent

                                               *bareline.components.diagnostics*
                       `bareline.components.diagnostics`
Diagnostics.
The diagnostics of the current buffer. Respects the value of:
`update_in_insert` from |vim.diagnostic.config()|.
Mockup: `e:2,w:1`
Type ~
BareComponent

                                                  *bareline.components.position*
                         `bareline.components.position`
Cursor position.
The current cursor position in the format: line,column/total-lines.
Mockup: `181,43/329`
Type ~
BareComponent

------------------------------------------------------------------------------
                                                         *bareline.draw_methods*

Draw methods are functions which take a single argument, a table holding one
or more statuslines, and implement how the statusline(s) is(are) drawn.

A statusline is a list of sections, and a section is a list of components, as
per the `user supplied components` documented in the section 'Overriding the
defaults' from |bareline.default_config|.


                           *bareline.draw_methods.draw_active_inactive_plugin()*
       `bareline.draw_methods.draw_active_inactive_plugin`({statuslines})
Draw distinct statuslines for active, inactive and plugin windows.
Rely on |autocmd|s and a |timer| (not everything is watched). The provided
statuslines are handled in this order by table index: [1] drawn on the active
window, [2] drawn on the inactive window and [3] drawn on the plugin window
(having precedence over the active window statusline).
Parameters ~
{statuslines} BareStatusline[]

 vim:tw=78:ts=8:noet:ft=help:norl: