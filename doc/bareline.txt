*bareline* A statusline plugin for the pragmatic.

MIT License Copyright (c) 2024 Hernán Cervera.

Contents:

1. Introduction                                   |bareline-introduction|
2. Quickstart                                     |bareline-quickstart|
3. Configuration                                  |bareline-configuration|
4. Custom components                              |bareline-custom-components|
5. Built-in components                            |bareline-built-in-components|

                  Press `gO` to load the table of contents in the location list.
==============================================================================
                                                         *bareline-introduction*
Introduction ~

Key design ideas

1. Ease of configuration.
2. Batteries included experience.
3. No timer required. Update immediately as changes happen.

Concepts

Bareline conceptualizes a statusline in this way:
• A statusline is a list of sections.
• Each section is a list of components.

Visualized example

Statusline: | NOR  lua/bareline.lua                        (main)  22,74/454 |
              Section 1                                    Section 2
              └── Components                               └── Components
                  ├── Vim mode                                 ├── Git HEAD
                  └── Relative file path                       └── Location

------------------------------------------------------------------------------
                                                           *bareline-quickstart*
Quickstart ~

To enable the plugin with the defaults, call the `setup()` function. Usage:
>lua
  require("bareline").setup()
  vim.o.showmode = false -- Optional, recommended.
<
                                                              *bareline.setup()*
                           `bareline.setup`({config})
Module setup.
Parameters ~
{config} `(table?)` Merged with the default config (|bareline.default_config|)
and the former takes precedence on duplicate keys.

------------------------------------------------------------------------------
                                                               *bareline.config*
                                                       *bareline.default_config*
                                                        *bareline-configuration*
Configuration ~

The merged config (defaults with user overrides) is in `bareline.config`. The
default config is in `bareline.default_config`. The default uses distinct
statuslines for active, inactive and plugin windows.

Below is the default config; `bareline` is the value of `require("bareline")`.
>lua
  {
    statuslines = {
      -- Active window.
      active = {
        { -- Section 1: Left.
          bareline.components.vim_mode,
          bareline.components.file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          "%m",
          "%h",
          "%r",
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.indent_style,
          bareline.components.end_of_line,
          bareline.components.git_head,
          bareline.components.cwd,
          bareline.components.position,
        },
      },
      -- Inactive windows.
      inactive = {
        { -- Section 1: Left.
          bareline.components.vim_mode:config({ mask = " " }),
          bareline.components.file_path_relative_to_cwd,
          bareline.components.lsp_servers,
          "%m",
          "%h",
          "%r",
        },
        { -- Section 2: Right.
          bareline.components.diagnostics,
          bareline.components.indent_style,
          bareline.components.end_of_line,
          bareline.components.cwd,
          bareline.components.position,
        },
      },
      -- Plugin windows.
      plugin = {
        { -- Section 1: Left.
          bareline.components.plugin_name,
          "%m",
        },
        { -- Section 2: Right.
          bareline.components.position,
        },
      },
    },
    components = {
      git_head = {
        worktrees = {},
      },
    },
    logging = {
      enabled = false
    }
  }
<
                                                   *bareline.config.statuslines*
Configures the statusline. Each field holds a statusline table definition per
window state. All the fields are of the same type: a list of lists of objects.
The lists are the sections (i.e. left, right) and the objects are the
components (strings, functions or |BareComponent|s).

Fields:

                                            *bareline.config.statuslines.active*
    {active} `(table)`
Definition for the statusline of the win focused by the cursor.

                                          *bareline.config.statuslines.inactive*
    {inactive} `(table)`
Definition for the statuslines of the wins which are:
1. NOT focused by the cursor and
2. NOT displaying a plugin's UI.

                                            *bareline.config.statuslines.plugin*
    {plugin} `(table)`
Definition for the statusline of the wins displaying a plugin's UI.

                                                    *bareline.config.components*
The component options set in |bareline.BareComponent:new()| are merged with
these options. The options here have precedence on duplicate keys.

Fields:

                                           *bareline.config.components.git_head*
    {git_head} `(table)`
See |bareline.components.git_head|.

                                                       *bareline.config.logging*
Monitor statusline redraws. The log file is located at the data directory
(`stdpath("data")`) in `bareline.nvim/bareline.log`.

Fields:

                                               *bareline.config.logging.enabled*
    {enabled} `(boolean)`
Whether to write to the log file. Default: false.

------------------------------------------------------------------------------
                                                    *bareline-custom-components*
Custom components ~

Bareline comes with some components: |bareline-built-in-components|. If none
provide what you want, you can create your own. A component can be a string,
function or |bareline.BareComponent|:

1. String: Gets evaluated as a statusline string (see 'statusline'). Examples:
   • Arbitrary string: `"S-WRAP"`. In the statusline you'll see `S-WRAP`.
   • Options: `vim.bo.fileformat`. In the statusline you might see `unix`.
   • Statusline item: `"%r"`. In the statusline you might see `[RO]`.

2. Function: Returns a string or nil. When a string, it's placed in the
   statusline; when nil, the component is skipped. Example:
>lua
   -- Get the tail of the current working directory.
   local component_cwd = function ()
     local cwd = vim.uv.cwd() or ""
     if cwd == vim.uv.os_getenv("HOME", 60) then return "~" end
     return vim.fn.fnamemodify(cwd, ":t")
   end
<
3. |bareline.BareComponent|: Create one of this type if you need to specify a
   watching config on when to redraw the statusline to keep the component
   up-to-date. This is for when you need to watch a file or directory or
   register autocommands.

For several use cases, you don't need to specify a watching config, so you can
get away with a string or function component. The autocommands configured by
default might be enough to monitor what is displayed in your statusline:

  |BufEnter|, |BufWinEnter|, |WinEnter|, |VimResume|,
  |FocusGained|, |OptionSet|, |DirChanged|, |TermLeave|.

------------------------------------------------------------------------------
                                                        *bareline.BareComponent*
                            `bareline.BareComponent`
Standardized statusline component.
All |bareline-built-in-components| are a |bareline.BareComponent|. To create
your own components, you can use this class or use simpler types as described
in |bareline-custom-components|.
Class ~
{BareComponent}
Fields ~
{value} `(string|fun(opts:table):any)` Provides the value displayed in the
statusline, like the diagnostics. When the value is a function, it gets the
argument `opts` from the field `opts` of the |bareline.BareComponent| object.
This is powerful, as it allows configuring components after creation and
setting options not present in |bareline-BareComponentCommonOpts|.
See: |bareline.BareComponent:config()|
{opts} `(BareComponentCommonOpts)`

                                              *bareline-BareComponentCommonOpts*
Options applicable to any |bareline.BareComponent|.
Class ~
{BareComponentCommonOpts}
Fields ~
{watcher} `(BareComponentWatcher?)` Specifies when the statusline is redrawn.
{cache_on_vim_modes} `((string[]|fun():string[])|nil)` Use cache in these Vim
modes. Each Vim mode is expected as the first char returned by |mode()|.
{mask} `(string?)` Single character used to mask the value.

                                                 *bareline-BareComponentWatcher*
Defines watcher configuration for a |bareline.BareComponent|.
Since this plugin does not implement a timer-based statusline redraw, it needs
a way to know when to do a redraw. That knowledge is provided here.
Class ~
{BareComponentWatcher}
Fields ~
{autocmd} `(table?)` Expects a table with the keys `event` and `opts`. These
values are passed as-is to |vim.api.nvim_create_autocmd()|.
{filepath} `((string|fun():string)|nil)` File or dir path to watch.

                                                  *bareline.BareComponent:new()*
              `bareline.BareComponent:new`({value}, {common_opts})
Constructor.
Parameters ~
{value} `((string|fun(opts:table):any)|nil)` Initial value of field `value`.
{common_opts} `(BareComponentCommonOpts?)` Initial value of field `opts`.
Return ~
`(BareComponent)`

                                               *bareline.BareComponent:config()*
                    `bareline.BareComponent:config`({opts})
Update component opts.
Parameters ~
{opts} `(table)` The field `opts` from |bareline.BareComponent| is merged with
these opts. For built-in components, the option keys here have priority over
what is set in both |bareline.BareComponent:new()| and at the plugin setup,
i.e. |bareline.config.components|. Built-in components have their custom
options documented, which can be set using this method.
For an example, see |bareline.components.git_head|.
Return ~
`(BareComponent)`

                                                  *bareline.BareComponent:get()*
                         `bareline.BareComponent:get`()
Retrieve the value of the component.
Return ~
`(string)` `(optional)`

------------------------------------------------------------------------------
                                                  *bareline-built-in-components*
Built-in components ~

Built-in components for use in |bareline.config.statusline|. These are all
structured as a |bareline.BareComponent|. If you want to create your own
component see |bareline-custom-components|.

                                                  *bareline.components.vim_mode*
                         `bareline.components.vim_mode`
Vim mode.
The Vim mode in 3 characters.
Mockups: `NOR`, `VIS`
Type ~
`(BareComponent)`

                                               *bareline.components.plugin_name*
                       `bareline.components.plugin_name`
Plugin name.
When on a plugin window, the formatted name of the plugin window.
Mockup: `[nvimtree]`
Type ~
`(BareComponent)`

                                              *bareline.components.indent_style*
                       `bareline.components.indent_style`
Indent style.
Relies on 'expandtab' and 'tabstop'. Omitted when the buf is 'nomodifiable'.
Mockups: `spaces:2`, `tabs:4`
Type ~
`(BareComponent)`

                                               *bareline.components.end_of_line*
                       `bareline.components.end_of_line`
End of line (EOL).
Indicates when the buffer does not have an EOL on its last line. Return `noeol`
in this case, nil otherwise. This uses the option 'eol'.
Type ~
`(BareComponent)`

                                                  *bareline.components.git_head*
                         `bareline.components.git_head`
Git HEAD.
No need to have Git installed for this to work. Search order of the Git HEAD:
1. Dir or file `.git` in the current working dir. If none, search it upwards.
2. List `worktrees` from `opts` of |bareline.BareComponent|.

Custom options:
    {worktrees} `(table)`
List with the same structure as what the gitsigns.nvim plugin expects:
<https://github.com/lewis6991/gitsigns.nvim>. This provides support for
detached working trees; useful for bare repositories. Example:
>lua
  bareline.components.git_head:config({
    worktrees = {
      {
        toplevel = vim.env.HOME,
        gitdir = vim.env.HOME .. "/projects/dotfiles.git"
      }
    }
  })
<
Mockup: `(main)`
Type ~
`(BareComponent)`

                                               *bareline.components.lsp_servers*
                       `bareline.components.lsp_servers`
LSP servers.
The LSP servers attached to the current buffer.
Mockup: `[lua_ls]`
Type ~
`(BareComponent)`

                                 *bareline.components.file_path_relative_to_cwd*
                `bareline.components.file_path_relative_to_cwd`
Stable `%f`.
The file path relative to the current working directory (|:pwd|). When the
user home directory appears in the file path, `~` is used to shorten the path.
Mockup: `lua/bareline.lua`
Type ~
`(BareComponent)`

                                               *bareline.components.diagnostics*
                       `bareline.components.diagnostics`
Diagnostics.
The diagnostics of the current buffer. Respects the value of:
`update_in_insert` from |vim.diagnostic.config()|.
Mockup: `e:2,w:1`
Type ~
`(BareComponent)`

                                                  *bareline.components.position*
                         `bareline.components.position`
Cursor position.
The current cursor position in the format: line,column/total-lines.
Mockup: `181:43/329`
Type ~
`(BareComponent)`

                                                       *bareline.components.cwd*
                           `bareline.components.cwd`
Current working directory.
When the current working directory (cwd) is the home dir, then `~` is shown.
Otherwise, the name of the directory is shown, excluding the path.
Mockup: `bareline.nvim`
Type ~
`(BareComponent)`

 vim:tw=78:ts=8:noet:ft=help:norl: